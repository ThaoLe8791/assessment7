Timing Information:
-------------------

Extra Large Array
-----------------
Time to run code with push(): 3.461466 ms
Time to run code with unshift(): 827.43189 ms

Large Array
-----------
Time to run code with push(): 806.655 μs
Time to run code with unshift(): 7.511403 ms

Medium Array
------------
Time to run code with push(): 188.312 μs
Time to run code with unshift(): 199.189 μs

Small Array
-----------
Time to run code with push(): 140.545 μs
Time to run code with unshift(): 70.029 μs

Tiny Array
----------
Time to run code with push(): 116.499 μs
Time to run code with unshift(): 55.621 μs


=====
doublerAppend: This function scales well because it uses the push() method to add elements to the end of the array. 
The time complexity of push() is constant (O(1)), meaning that adding an element to the end of an array takes the 
same amount of time, regardless of the size of the array. As the array size increases, the time it takes to execute 
doublerAppend will also increase, but at a constant rate, not proportionate to the size of the array.

doublerInsert: This function does not scale as well because it uses the unshift() method to add elements to the 
beginning of the array. The time complexity of unshift() is linear (O(n)), meaning that adding an element to the 
beginning of an array takes time proportional to the size of the array. As the array size increases, the time it 
takes to execute doublerInsert will increase at a rate that is directly proportional to the size of the array.

In summary, doublerAppend scales better than doublerInsert because the time complexity of push() is constant, 
while the time complexity of unshift() is linear. We can tell this by observing the timing results for 
different array sizes: as the array size increases, the execution time for doublerAppend increases at a 
relatively constant rate, while the execution time for doublerInsert increases at a rate that is directly 
proportional to the size of the array. Therefore, doublerAppend is the more efficient and scalable function 
for adding elements to an array.